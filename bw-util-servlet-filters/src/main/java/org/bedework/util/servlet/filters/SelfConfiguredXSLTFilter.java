/* ********************************************************************
    Licensed to Jasig under one or more contributor license
    agreements. See the NOTICE file distributed with this work
    for additional information regarding copyright ownership.
    Jasig licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file
    except in compliance with the License. You may obtain a
    copy of the License at:

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on
    an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied. See the License for the
    specific language governing permissions and limitations
    under the License.
*/
package org.bedework.util.servlet.filters;

import org.bedework.util.servlet.HttpServletUtils;

import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;

/** This filter configures the superclass according to initialisation
 * parameters in web.xml. It then looks for additional configuration parameters
 * in the incoming request. The paramaters include some or all of the following:
 * <ul>
 * <li><b>approot</b> Root path to the css styles etc. probably a url. Only in
 *                  the init parameters</li>
 * <li><b>locale info</b> Allows different language and country versions</li>
 * <li><b>browser type</b> Different styles for different browsers</li>
 * <li><b>skin-name</b> Allow user configurability</li>
 * </ul>
 * <p>The above could be achieved by building a compound name from the various
 * components or by building a path. We choose to build a path.
 *
 * <p>The locale info is two components from the current locale. These are a
 * valid ISO Language Code, the lower-case two-letter codes as defined by
 * ISO-639. These codes can be found at a number of sites, such as
 * http://www.ics.uci.edu/pub/ietf/http/related/iso639.txt
 * <p>
 * The second part is a valid ISO Country Code. These codes are the upper-case
 * two-letter codes as defined by ISO-3166. A full list of these codes can be
 * found at a number of sites, such as <br/>
 * http://www.chemie.fu-berlin.de/diverse/doc/ISO_3166.html
 * <p>
 * The result is a string of the form "en_US"
 *
 * <p>The browser type can be any string. We choose to use the browser types
 * generated by HttpServletUtils.getBrowserType which maps user agents on
 * to a more restricted set of types.
 *
 * <p>The skin name is also an arbitrary string.
 *
 * <p>The values for these fields will be set by the doPreFilter method
 * which can be overriden. This method will be called before each invocation
 * of the filter. The values may be set at each call, however, the filter
 * will not be reinitialised unless the path has changed
 *
 * <p>The obtainConfigInfo method can be overridden to supply this filter
 * with the required information. This will be the more normal way of
 * supplying that information.
 *
 * @author Mike Douglass douglm@rpi.edu
 * @version June 18th 2003
 */
public class SelfConfiguredXSLTFilter extends ConfiguredXSLTFilter {
  private PresentationState pstate;

  /** Constructor
   *
   */
  public SelfConfiguredXSLTFilter() {
    super();
  }

  /* (non-Javadoc)
   * @see javax.servlet.Filter#init(javax.servlet.FilterConfig)
   */
  public void init(FilterConfig config) throws ServletException {
    super.init(config);

    String temp = config.getInitParameter("approot");

    if (temp == null) {
      throw new ServletException("Missing required init parameter: approot");
    }

    pstate = new PresentationState();
    pstate.setAppRoot(temp);

    temp = config.getInitParameter("noxslt");
    pstate.setNoXSLTSticky("yes".equals(temp));
  }

  public void updateConfigInfo(HttpServletRequest request,
                               ConfiguredXSLTFilter.XSLTConfig xcfg)
                                     throws ServletException {
    PresentationState pstate = getPresentationState(request);
    if (pstate == null) {
      // Still can't do a thing
      return;
    }

    /* First set default browser type from user-agent */
    pstate.setBrowserType(HttpServletUtils.getBrowserType(request));

    pstate.checkBrowserType(request);
    pstate.checkContentType(request);
    pstate.checkContentName(request);
    pstate.checkNoXSLT(request);
    pstate.checkRefreshXslt(request);
    pstate.checkSkinName(request);

    super.updateConfigInfo(request, xcfg);
  }
}

