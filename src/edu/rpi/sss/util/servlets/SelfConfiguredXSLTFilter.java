/* **********************************************************************
    Copyright 2006 Rensselaer Polytechnic Institute. All worldwide rights reserved.

    Redistribution and use of this distribution in source and binary forms,
    with or without modification, are permitted provided that:
       The above copyright notice and this permission notice appear in all
        copies and supporting documentation;

        The name, identifiers, and trademarks of Rensselaer Polytechnic
        Institute are not used in advertising or publicity without the
        express prior written permission of Rensselaer Polytechnic Institute;

    DISCLAIMER: The software is distributed" AS IS" without any express or
    implied warranty, including but not limited to, any implied warranties
    of merchantability or fitness for a particular purpose or any warrant)'
    of non-infringement of any current or pending patent rights. The authors
    of the software make no representations about the suitability of this
    software for any particular purpose. The entire risk as to the quality
    and performance of the software is with the user. Should the software
    prove defective, the user assumes the cost of all necessary servicing,
    repair or correction. In particular, neither Rensselaer Polytechnic
    Institute, nor the authors of the software are liable for any indirect,
    special, consequential, or incidental damages related to the software,
    to the maximum extent the law permits.
*/

package edu.rpi.sss.util.servlets;

import edu.rpi.sss.util.jsp.JspUtil;

import javax.servlet.FilterConfig;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.ServletException;

/** This filter configures the superclass according to initialisation
 * parameters in web.xml. It then looks for additional configuration parameters
 * in the incoming request. The paramaters include some or all of the following:
 * <ul>
 * <li><b>approot</b> Root path to the css styles etc. probably a url. Only in
 *                  the init parameters</li>
 * <li><b>locale info</b> Allows different language and country versions</li>
 * <li><b>browser type</b> Different styles for different browsers</li>
 * <li><b>skin-name</b> Allow user configurability</li>
 * </ul>
 * <p>The above could be achieved by building a compound name from the various
 * components or by building a path. We choose to build a path.
 *
 * <p>The locale info is two components from the current locale. These are a
 * valid ISO Language Code, the lower-case two-letter codes as defined by
 * ISO-639. These codes can be found at a number of sites, such as
 * http://www.ics.uci.edu/pub/ietf/http/related/iso639.txt
 * <p>
 * The second part is a valid ISO Country Code. These codes are the upper-case
 * two-letter codes as defined by ISO-3166. A full list of these codes can be
 * found at a number of sites, such as <br/>
 * http://www.chemie.fu-berlin.de/diverse/doc/ISO_3166.html
 * <p>
 * The result is a string of the form "en_US"
 *
 * <p>The browser type can be any string. We choose to use the browser types
 * generated by HttpServletUtils.getBrowserType which maps user agents on
 * to a more restricted set of types.
 *
 * <p>The skin name is also an arbitrary string.
 *
 * <p>The values for these fields will be set by the doPreFilter method
 * which can be overriden. This method will be called before each invocation
 * of the filter. The values may be set at each call, however, the filter
 * will not be reinitialised unless the path has changed
 *
 * <p>The obtainConfigInfo method can be overridden to supply this filter
 * with the required information. This will be the more normal way of
 * supplying that information.
 *
 * @author Mike Douglass douglm@rpi.edu
 * @version June 18th 2003
 */
public class SelfConfiguredXSLTFilter extends ConfiguredXSLTFilter {
  private PresentationState pstate;

  /** Constructor
   *
   */
  public SelfConfiguredXSLTFilter() {
    super();
  }

  /* (non-Javadoc)
   * @see javax.servlet.Filter#init(javax.servlet.FilterConfig)
   */
  public void init(FilterConfig config) throws ServletException {
    super.init(config);

    String temp = config.getInitParameter("approot");

    if (temp == null) {
      throw new ServletException("Missing required init parameter: approot");
    }

    pstate = new PresentationState();
    pstate.setAppRoot(temp);

    temp = config.getInitParameter("noxslt");
    pstate.setNoXSLTSticky("yes".equals(temp));

    temp = config.getInitParameter("rpidebug");
    debug = !("0".equals(temp));
  }

  /* (non-Javadoc)
   * @see edu.rpi.sss.util.servlets.ConfiguredXSLTFilter#updateConfigInfo(javax.servlet.http.HttpServletRequest, edu.rpi.sss.util.servlets.ConfiguredXSLTFilter.XSLTConfig)
   */
  public void updateConfigInfo(HttpServletRequest request,
                               ConfiguredXSLTFilter.XSLTConfig xcfg)
                                     throws ServletException {
    PresentationState pstate = getPresentationState(request);
    if (pstate == null) {
      // Still can't do a thing
      return;
    }

    /** First set default browser type from user-agent */
    pstate.setBrowserType(JspUtil.getBrowserType(request));

    pstate.checkBrowserType(request);
    pstate.checkContentType(request);
    pstate.checkContentName(request);
    pstate.checkNoXSLT(request);
    pstate.checkRefreshXslt(request);
    pstate.checkSkinName(request);

    super.updateConfigInfo(request, xcfg);
  }
}

